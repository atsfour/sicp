(define (install-rectangular-package)
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (generic-sqrt (add (generic-square (real-part z))
                       (generic-square (imag-part z)))))
  (define (angle z)
    (generic-atan (div (imag-part z) (real-part z))))
  (define (make-from-mag-ang r a)
    (generic-cons (mul r (generic-cos a)) (mul r (generic-sin a))))
  
  (define this-type-tag 'rectangular)
  (define (tag x) (attach-tag this-type-tag x))
  (put 'real-part (list this-type-tag) real-part)
  (put 'imag-part (list this-type-tag) imag-part)
  (put 'magnitude (list this-type-tag) magnitude)
  (put 'angle (list this-type-tag) angle)
  (put 'make-from-real-imag this-type-tag
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang this-type-tag
       (lambda (r a) (tag (make-from-mag-ang r a))))
  '(done rectangular))

(define (install-polar-package)
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (mul (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (mul (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y)
    (cons (generic-sqrt (add (generic-square x) (generic-square y)))
          (generic-atan (div y x))))
  
  (define this-type-tag 'polar)
  (define (tag x) (attach-tag this-type-tag x))
  (put 'real-part (list this-type-tag) real-part)
  (put 'imag-part (list this-type-tag) imag-part)
  (put 'magnitude (list this-type-tag) magnitude)
  (put 'angle (list this-type-tag) angle)
  (put 'make-from-real-imag this-type-tag
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang this-type-tag
       (lambda (r a) (tag (make-from-mag-ang r a))))
  '(done polar))

(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))
  (define (minus z)
    (make-from-real-imag (minus (real-part z))
                         (minus (imag-part z))))
  (define (my-equ? z1 z2)
    (and (apply-generic 'my-equ? (real-part z1) (real-part z2))
         (apply-generic 'my-equ? (imag-part z1) (imag-part z2))))
  (define (=zero? z)
    (and (my-equ? (real-part z) 0) (= (imag-part z) 0)))
  (define (project z)
    (make-real (real-part z)))
  
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'minus '(complex)
       (lambda (x) (tag (minus x))))
  (put 'my-equ? '(complex complex) my-equ?)
  (put '=zero? '(complex) =zero?)
  (put 'project 'complex project)
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (install-rectangular-package)
  (install-polar-package)
  '(done complex))

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))