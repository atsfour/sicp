;rational package

(define (install-rational-package)
  (define (denom x) (cdr x))
  (define (numer x) (car x))
  (define (gcd a b)
    (if (= (remainder a b) 0)
        (abs b)
        (gcd b (remainder a b))))
  (define (make-rat n d)
    (if (and (equal? (type-tag n) 'integer) (equal? (type-tag d) 'integer))
        (if (< d 0)
            (make-rat (- n) (- d))
            (let ((g (gcd n d)))
              (cons (/ n g) (/ d g))))
        (cons n d)))
  (define (add-rat x y)
    (make-rat (add (mul (numer x) (denom y))
                   (mul (denom x) (numer y)))
              (mul (denom x) (denom y))))
  (define (sub-rat x y)
    (add-rat x (minus y)))
  (define (mul-rat x y)
    (make-rat (mul (numer x) (numer y))
              (mul (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (mul (numer x) (denom y))
              (mul (denom x) (numer y))))
  (define (minus-rat x)
    (make-rat (minus (numer x)) (denom x)))
  (define (my-equ?-rational x y)
    (and (my-equ? (numer x) (numer y))
         (my-equ? (denom x) (denom y))))
  (define (=zero? x) (my-equ? (numer x) 0))
  (define (raise-rat x)
    (if (and (equal? (type-tag (numer x)) 'integer)
             (equal? (type-tag (denom x)) 'integer))
        (make-real (/ (numer x) (denom x)))
        #f))
  (define (project-rat x)
    (if (and (equal? (type-tag (numer x)) 'integer)
             (equal? (type-tag (denom x)) 'integer))
        (make-integer (floor (/ (numer x) (denom x))))
        #f))

  (define (tag x) (attach-tag 'rational x))
  (put 'numer '(rational) numer)
  (put 'denom '(rational) denom)
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'minus '(rational)
       (lambda (x) (tag (minus-rat x))))
  (put 'my-equ? '(rational rational) my-equ?-rational)
  (put '=zero? '(rational) =zero?)
  (put 'raise-type 'rational raise-rat)
  (put 'project 'rational project-rat)
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  '(done rational))

(define (make-rational n d)
  ((get 'make 'rational) n d))
