;rational package

(define (install-rational-package)
  (define (denom x) (cdr x))
  (define (numer x) (car x))
  (define (gcd a b)
    (if (= (remainder a b) 0)
        (abs b)
        (gcd b (remainder a b))))
  (define (make-rat n d)
    (if (< d 0)
        (make-rat (- n) (- d))
        (let ((g (gcd n d)))
          (cons (/ n g) (/ d g)))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (denom x) (numer y)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (add-rat x (minus y)))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (minus-rat x)
    (make-rat (- (numer x)) (denom x)))
  (define (my-equ? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))
  (define (=zero? x) (= (numer x) 0))
  (define (raise x) (make-real (/ (numer x) (denom x))))
  (define (project x) (make-integer (floor (/ (numer x) (denom x)))))

  (define (tag x) (attach-tag 'rational x))
  (put 'numer '(rational) numer)
  (put 'denom '(rational) denom)
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'minus '(rational)
       (lambda (x) (tag (minus-rat x))))
  (put 'my-equ? '(rational rational) my-equ?)
  (put '=zero? '(rational) =zero?)
  (put 'raise 'rational raise)
  (put 'project 'rational project)
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  '(done rational))

(define (make-rational n d)
  ((get 'make 'rational) n d))
